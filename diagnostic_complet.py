# diagnostic_complet.py
import sys
import platform
import importlib.util
import subprocess
import os
from pathlib import Path

def check_python_architecture():
    """V√©rifier l'architecture Python - CRITIQUE"""
    arch = platform.machine()
    python_version = sys.version
    
    print(f"üêç Python Version: {python_version}")
    print(f"üèóÔ∏è  Architecture Python: {arch}")
    
    if arch == "AMD64":
        print("‚úÖ Architecture Python x64 d√©tect√©e (CORRECT)")
        return True
    elif arch == "ARM64":
        print("‚ùå Architecture Python ARM64 d√©tect√©e (PROBL√âMATIQUE)")
        print("üí° Solution: R√©installer Python x64 (AMD64)")
        return False
    else:
        print(f"‚ö†Ô∏è  Architecture inconnue: {arch}")
        return False

def check_onnxruntime_installation():
    """V√©rifier quelle version ONNX Runtime est install√©e"""
    
    packages_to_check = ['onnxruntime', 'onnxruntime-qnn']
    results = {}
    
    for package in packages_to_check:
        try:
            result = subprocess.run([sys.executable, '-m', 'pip', 'show', package], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                # Extraire la version
                lines = result.stdout.split('\n')
                version_line = next((line for line in lines if line.startswith('Version:')), None)
                version = version_line.split(': ')[1] if version_line else "Version inconnue"
                results[package] = f"‚úÖ Install√© - Version {version}"
            else:
                results[package] = "‚ùå Non install√©"
        except Exception as e:
            results[package] = f"‚ùå Erreur: {e}"
    
    print("\nüì¶ Packages ONNX Runtime:")
    for package, status in results.items():
        print(f"  {package}: {status}")
    
    return results

def check_onnxruntime_providers():
    """V√©rifier les providers ONNX Runtime disponibles"""
    try:
        import onnxruntime as ort
        providers = ort.get_available_providers()
        version = ort.__version__
        
        print(f"\nüß† ONNX Runtime Version: {version}")
        print(f"üìã Providers disponibles: {providers}")
        
        if "QNNExecutionProvider" in providers:
            print("‚úÖ QNNExecutionProvider trouv√©!")
            return True
        else:
            print("‚ùå QNNExecutionProvider MANQUANT")
            return False
            
    except ImportError:
        print("‚ùå ONNX Runtime non importable")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification providers: {e}")
        return False

def check_device_manager_npu():
    """V√©rifier le NPU dans Device Manager via PowerShell"""
    try:
        # Commande PowerShell pour v√©rifier le NPU
        ps_command = "Get-PnpDevice -FriendlyName '*Hexagon*NPU*' | Select-Object Status, FriendlyName"
        
        result = subprocess.run([
            "powershell", "-Command", ps_command
        ], capture_output=True, text=True)
        
        print(f"\nüîå Statut NPU dans Device Manager:")
        if result.stdout.strip():
            print(result.stdout)
            if "OK" in result.stdout:
                print("‚úÖ NPU d√©tect√© et fonctionnel")
                return True
            else:
                print("‚ö†Ô∏è  NPU d√©tect√© mais possiblement probl√©matique")
                return False
        else:
            print("‚ùå NPU non d√©tect√© dans Device Manager")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur v√©rification Device Manager: {e}")
        return False

def check_qnn_dll_location():
    """Chercher les DLL QNN dans le syst√®me"""
    print(f"\nüîç Recherche des DLL QNN...")
    
    # Chemins typiques o√π chercher QnnHtp.dll
    search_paths = [
        Path(sys.executable).parent / "Lib" / "site-packages" / "onnxruntime" / "capi",
        Path.home() / "AppData" / "Local" / "Programs" / "Python" / "Python311" / "Lib" / "site-packages" / "onnxruntime" / "capi",
        Path("C:") / "Qualcomm",
        Path("C:") / "Program Files" / "Qualcomm",
        Path("C:") / "ai" / "qcdll"  # Chemin from pkbullock example
    ]
    
    found_dlls = []
    
    for search_path in search_paths:
        if search_path.exists():
            for dll_file in search_path.rglob("QnnHtp.dll"):
                found_dlls.append(str(dll_file))
                print(f"‚úÖ Trouv√©: {dll_file}")
    
    if not found_dlls:
        print("‚ùå Aucune DLL QnnHtp.dll trouv√©e")
        print("üí° Les DLL QNN devraient √™tre incluses avec onnxruntime-qnn")
    
    return found_dlls

def main():
    """Diagnostic complet"""
    print("üöÄ DIAGNOSTIC COMPLET - QNNExecutionProvider")
    print("=" * 60)
    
    # 1. Architecture Python
    arch_ok = check_python_architecture()
    
    # 2. Installation ONNX Runtime
    packages = check_onnxruntime_installation()
    
    # 3. Providers disponibles
    providers_ok = check_onnxruntime_providers()
    
    # 4. NPU Device Manager
    npu_ok = check_device_manager_npu()
    
    # 5. DLL QNN
    dll_locations = check_qnn_dll_location()
    
    # R√©sum√© et recommandations
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DU DIAGNOSTIC")
    print("=" * 60)
    
    if not arch_ok:
        print("üö® PROBL√àME CRITIQUE: Architecture Python incorrecte")
        print("   ‚Üí R√©installer Python x64 (AMD64) OBLIGATOIRE")
    
    if 'onnxruntime-qnn' not in packages or '‚ùå' in packages['onnxruntime-qnn']:
        print("üö® PROBL√àME: onnxruntime-qnn non install√© ou d√©faillant")
        print("   ‚Üí Installer/r√©installer onnxruntime-qnn")
    
    if not providers_ok:
        print("üö® PROBL√àME: QNNExecutionProvider non disponible")
    
    if not npu_ok:
        print("üö® PROBL√àME: NPU non d√©tect√© ou non fonctionnel")
        print("   ‚Üí V√©rifier installation pilote NPU")
    
    if not dll_locations:
        print("üö® PROBL√àME: DLL QNN introuvables")
        print("   ‚Üí R√©installer onnxruntime-qnn")
    
    # Status global
    all_ok = arch_ok and providers_ok and npu_ok and dll_locations
    
    if all_ok:
        print("\nüéâ DIAGNOSTIC OK - Configuration semble correcte")
        print("   Si le probl√®me persiste, voir solutions avanc√©es")
    else:
        print("\n‚ö†Ô∏è  PROBL√àMES D√âTECT√âS - Suivre les solutions ci-dessous")

if __name__ == "__main__":
    main()